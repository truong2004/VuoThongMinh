import cv2
import numpy as np
from flask import Flask, Response, render_template
from ultralytics import YOLO
import requests
import datetime

app = Flask(__name__)

ESP32_IP = "http:/172.16.18.79:81/stream"  # Thay b·∫±ng IP th·ª±c t·∫ø c·ªßa ESP32-CAM
YOLO_MODEL = "yolov8n-seg.pt"  # Model segmentation
TELEGRAM_BOT_TOKEN = "7565316426:AAGcX35IaebMd5O4rRPsf3355ExqLbYxIDg"
TELEGRAM_CHAT_ID = "7077556124"

# Load m√¥ h√¨nh YOLOv8 segmentation
model = YOLO(YOLO_MODEL)

# G·ª≠i c·∫£nh b√°o qua Telegram
def send_alert(image):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    _, img_encoded = cv2.imencode(".jpg", image)
    files = {"photo": ("alert.jpg", img_encoded.tobytes())}
    data = {"chat_id": TELEGRAM_CHAT_ID, "caption": f"üö® C·∫£nh b√°o: Ph√°t hi·ªán ng∆∞·ªùi l√∫c {timestamp}"}
    requests.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto", data=data, files=files)

# Nh·∫≠n di·ªán ƒë·ªëi t∆∞·ª£ng b·∫±ng segmentation
def detect_objects(frame):
    results = model(frame)
    person_detected = False  

    for result in results:
        if result.masks:  
            for box, mask in zip(result.boxes, result.masks.xy):
                conf = box.conf[0].item()
                cls = int(box.cls[0])  
                
                if conf < 0.5:
                    continue
                
                mask = np.array(mask, np.int32)
                label = "Unknown"

                # Ph√¢n lo·∫°i m√†u s·∫Øc theo nh√≥m
                COLORS = {
                    "nguoi": (255, 0, 0),       # Ng∆∞·ªùi - ƒê·ªè
                    "dat": (139, 69, 19),       # ƒê·∫•t - N√¢u ƒë·∫•t
                    "dat_xam": (105, 105, 105), # ƒê·∫•t - X√°m
                    "rau_nho": (34, 139, 34),   # Rau nh·ªè - Xanh l√° c√¢y ƒë·∫≠m
                    "rau_lon": (0, 255, 127)    # Rau l·ªõn - Xanh l√° s√°ng
                }

                # X√°c ƒë·ªãnh di·ªán t√≠ch mask ƒë·ªÉ ph√¢n bi·ªát rau thu ho·∫°ch v√† ch∆∞a thu ho·∫°ch
                area = cv2.contourArea(mask)

                if cls == 0:  # Ng∆∞·ªùi
                    label = "Ng∆∞·ªùi"
                    color = COLORS["nguoi"]
                    person_detected = True  
                elif cls == 1:  # ƒê·∫•t tr·ªëng (n√¢u v√† x√°m)
                    label = "ƒê·∫•t"
                    color = COLORS["dat"] if np.random.rand() > 0.5 else COLORS["dat_xam"]
                elif cls == 2 or cls == 3:  # Rau (d√πng di·ªán t√≠ch ƒë·ªÉ x√°c ƒë·ªãnh)
                    if area < 5000:  # Gi·ªõi h·∫°n di·ªán t√≠ch (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
                        label = "Rau nh·ªè"
                        color = COLORS["rau_nho"]
                    else:
                        label = "Rau l·ªõn"
                        color = COLORS["rau_lon"]

                # V·∫Ω contour thay v√¨ h√¨nh ch·ªØ nh·∫≠t
                cv2.polylines(frame, [mask], isClosed=True, color=color, thickness=3)
                cv2.putText(frame, label, (mask[0][0], mask[0][1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

    # G·ª≠i c·∫£nh b√°o n·∫øu ph√°t hi·ªán ng∆∞·ªùi
    if person_detected:
        send_alert(frame)

    return frame

# K·∫øt n·ªëi ESP32-CAM
def connect_camera():
    cap = cv2.VideoCapture(ESP32_IP)
    cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
    return cap

# X·ª≠ l√Ω stream video
def generate_frames():
    cap = connect_camera()
    while cap.isOpened():
        success, frame = cap.read()
        if not success:
            break
        frame = detect_objects(frame)
        _, buffer = cv2.imencode(".jpg", frame)
        yield (b"--frame\r\n"
               b"Content-Type: image/jpeg\r\n\r\n" + buffer.tobytes() + b"\r\n")
    cap.release()

# Giao di·ªán web
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/video_feed")
def video_feed():
    return Response(generate_frames(), mimetype="multipart/x-mixed-replace; boundary=frame")

# Ch·∫°y ·ª©ng d·ª•ng Flask
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)